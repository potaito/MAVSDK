// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/landing_target/landing_target.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>


#include "plugin_base.h"

#include "handle.h"

namespace mavsdk {


class System;class LandingTargetImpl;

/**
 * @brief Allows developers to stream the position of a landing target for the drone to land on.
 */
class LandingTarget : public PluginBase {
public:

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto landing_target = LandingTarget(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit LandingTarget(System& system); // deprecated

    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto landing_target = LandingTarget(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit LandingTarget(std::shared_ptr<System> system); // new


    /**
     * @brief Destructor (internal use only).
     */
    ~LandingTarget() override;





    /**
     * @brief Position type in sensor frame coordinates
     */
    struct PositionLocal {
        
        float x{}; /**< @brief Coordinate of landing target */
        float y{}; /**< @brief Coordinate of landing target */
        float z{}; /**< @brief Coordinate of landing target */
    };

    /**
     * @brief Equal operator to compare two `LandingTarget::PositionLocal` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const LandingTarget::PositionLocal& lhs, const LandingTarget::PositionLocal& rhs);

    /**
     * @brief Stream operator to print information about a `LandingTarget::PositionLocal`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LandingTarget::PositionLocal const& position_local);





    /**
     * @brief Possible results returned for LandingTarget publish requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Success. */
        NoSystem, /**< @brief No system is connected. */
    };

    /**
     * @brief Stream operator to print information about a `LandingTarget::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LandingTarget::Result const& result);



    /**
     * @brief Callback type for asynchronous LandingTarget calls.
     */
    using ResultCallback = std::function<void(Result)>;






    /**
     * @brief Publish landing target measurement recorded by a sensor onboard the drone
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result publish_position_relative(PositionLocal position_local) const;




    /**
     * @brief Copy constructor.
     */
    LandingTarget(const LandingTarget& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const LandingTarget& operator=(const LandingTarget&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<LandingTargetImpl> _impl;
};

} // namespace mavsdk