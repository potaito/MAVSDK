// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/landing_target_server/landing_target_server.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "server_plugin_base.h"

#include "handle.h"

namespace mavsdk {

class ServerComponent;
class LandingTargetServerImpl;

/**
 * @brief Allows developers to stream the position of a landing target for the drone to land on.
 */
class LandingTargetServer : public ServerPluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a ServerComponent instance.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto landing_target_server = LandingTargetServer(server_component);
     *     ```
     *
     * @param server_component The ServerComponent instance associated with this server plugin.
     */
    explicit LandingTargetServer(std::shared_ptr<ServerComponent> server_component);

    /**
     * @brief Destructor (internal use only).
     */
    ~LandingTargetServer() override;

    /**
     * @brief Position type in sensor frame coordinates
     */
    struct Position {
        float x{}; /**< @brief Coordinate of landing target */
        float y{}; /**< @brief Coordinate of landing target */
        float z{}; /**< @brief Coordinate of landing target */
    };

    /**
     * @brief Equal operator to compare two `LandingTargetServer::Position` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const LandingTargetServer::Position& lhs, const LandingTargetServer::Position& rhs);

    /**
     * @brief Stream operator to print information about a `LandingTargetServer::Position`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, LandingTargetServer::Position const& position);

    /**
     * @brief Possible results returned for LandingTarget publish requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown result. */
        Success, /**< @brief Success. */
        NoSystem, /**< @brief No system is connected. */
    };

    /**
     * @brief Stream operator to print information about a `LandingTargetServer::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LandingTargetServer::Result const& result);

    /**
     * @brief Callback type for asynchronous LandingTargetServer calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief Publish landing target measurement recorded by a sensor onboard the drone
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    Result publish_landing_target_relative(Position position) const;

    /**
     * @brief Copy constructor.
     */
    LandingTargetServer(const LandingTargetServer& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const LandingTargetServer& operator=(const LandingTargetServer&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<LandingTargetServerImpl> _impl;
};

} // namespace mavsdk