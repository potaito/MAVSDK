// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/landing_target/landing_target.proto)

#include "landing_target/landing_target.grpc.pb.h"
#include "plugins/landing_target/landing_target.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {


template<typename LandingTarget = LandingTarget, typename LazyPlugin = LazyPlugin<LandingTarget>>

class LandingTargetServiceImpl final : public rpc::landing_target::LandingTargetService::Service {
public:

    LandingTargetServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}



    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::LandingTarget::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_landing_target_result = new rpc::landing_target::LandingTargetResult();
        rpc_landing_target_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_landing_target_result->set_result_str(ss.str());

        response->set_allocated_landing_target_result(rpc_landing_target_result);
    }




    static std::unique_ptr<rpc::landing_target::PositionLocal> translateToRpcPositionLocal(const mavsdk::LandingTarget::PositionLocal &position_local)
    {
        auto rpc_obj = std::make_unique<rpc::landing_target::PositionLocal>();


            
        rpc_obj->set_x(position_local.x);
            
        
            
        rpc_obj->set_y(position_local.y);
            
        
            
        rpc_obj->set_z(position_local.z);
            
        

        return rpc_obj;
    }

    static mavsdk::LandingTarget::PositionLocal translateFromRpcPositionLocal(const rpc::landing_target::PositionLocal& position_local)
    {
        mavsdk::LandingTarget::PositionLocal obj;


            
        obj.x = position_local.x();
            
        
            
        obj.y = position_local.y();
            
        
            
        obj.z = position_local.z();
            
        
        return obj;
    }




    static rpc::landing_target::LandingTargetResult::Result translateToRpcResult(const mavsdk::LandingTarget::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::LandingTarget::Result::Unknown:
                return rpc::landing_target::LandingTargetResult_Result_RESULT_UNKNOWN;
            case mavsdk::LandingTarget::Result::Success:
                return rpc::landing_target::LandingTargetResult_Result_RESULT_SUCCESS;
            case mavsdk::LandingTarget::Result::NoSystem:
                return rpc::landing_target::LandingTargetResult_Result_RESULT_NO_SYSTEM;
        }
    }

    static mavsdk::LandingTarget::Result translateFromRpcResult(const rpc::landing_target::LandingTargetResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::landing_target::LandingTargetResult_Result_RESULT_UNKNOWN:
                return mavsdk::LandingTarget::Result::Unknown;
            case rpc::landing_target::LandingTargetResult_Result_RESULT_SUCCESS:
                return mavsdk::LandingTarget::Result::Success;
            case rpc::landing_target::LandingTargetResult_Result_RESULT_NO_SYSTEM:
                return mavsdk::LandingTarget::Result::NoSystem;
        }
    }




    grpc::Status PublishPositionRelative(
        grpc::ServerContext* /* context */,
        const rpc::landing_target::PublishPositionRelativeRequest* request,
        rpc::landing_target::PublishPositionRelativeResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            if (response != nullptr) {
                auto result = mavsdk::LandingTarget::Result::NoSystem;
                fillResponseWithResult(response, result);
            }
            
            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "PublishPositionRelative sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }
            
        
        auto result = _lazy_plugin.maybe_plugin()->publish_position_relative(translateFromRpcPositionLocal(request->position_local()));
        

        
        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }
        

        return grpc::Status::OK;
    }


    void stop() {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom) {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom) {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end(); /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }


    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises {};
};

} // namespace mavsdk_server
} // namespace mavsdk