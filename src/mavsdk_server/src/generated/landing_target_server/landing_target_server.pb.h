// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: landing_target_server/landing_target_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace landing_target_server {
class LandingTargetResult;
struct LandingTargetResultDefaultTypeInternal;
extern LandingTargetResultDefaultTypeInternal _LandingTargetResult_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PublishLandingTargetRelativeRequest;
struct PublishLandingTargetRelativeRequestDefaultTypeInternal;
extern PublishLandingTargetRelativeRequestDefaultTypeInternal _PublishLandingTargetRelativeRequest_default_instance_;
class PublishLandingTargetRelativeResponse;
struct PublishLandingTargetRelativeResponseDefaultTypeInternal;
extern PublishLandingTargetRelativeResponseDefaultTypeInternal _PublishLandingTargetRelativeResponse_default_instance_;
}  // namespace landing_target_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::landing_target_server::LandingTargetResult* Arena::CreateMaybeMessage<::mavsdk::rpc::landing_target_server::LandingTargetResult>(Arena*);
template<> ::mavsdk::rpc::landing_target_server::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::landing_target_server::Position>(Arena*);
template<> ::mavsdk::rpc::landing_target_server::PublishLandingTargetRelativeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::landing_target_server::PublishLandingTargetRelativeRequest>(Arena*);
template<> ::mavsdk::rpc::landing_target_server::PublishLandingTargetRelativeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::landing_target_server::PublishLandingTargetRelativeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace landing_target_server {

enum LandingTargetResult_Result : int {
  LandingTargetResult_Result_RESULT_UNKNOWN = 0,
  LandingTargetResult_Result_RESULT_SUCCESS = 1,
  LandingTargetResult_Result_RESULT_NO_SYSTEM = 2,
  LandingTargetResult_Result_LandingTargetResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LandingTargetResult_Result_LandingTargetResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LandingTargetResult_Result_IsValid(int value);
constexpr LandingTargetResult_Result LandingTargetResult_Result_Result_MIN = LandingTargetResult_Result_RESULT_UNKNOWN;
constexpr LandingTargetResult_Result LandingTargetResult_Result_Result_MAX = LandingTargetResult_Result_RESULT_NO_SYSTEM;
constexpr int LandingTargetResult_Result_Result_ARRAYSIZE = LandingTargetResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandingTargetResult_Result_descriptor();
template<typename T>
inline const std::string& LandingTargetResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LandingTargetResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LandingTargetResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LandingTargetResult_Result_descriptor(), enum_t_value);
}
inline bool LandingTargetResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LandingTargetResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LandingTargetResult_Result>(
    LandingTargetResult_Result_descriptor(), name, value);
}
// ===================================================================

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.landing_target_server.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.landing_target_server.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.landing_target_server.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishLandingTargetRelativeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest) */ {
 public:
  inline PublishLandingTargetRelativeRequest() : PublishLandingTargetRelativeRequest(nullptr) {}
  ~PublishLandingTargetRelativeRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishLandingTargetRelativeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishLandingTargetRelativeRequest(const PublishLandingTargetRelativeRequest& from);
  PublishLandingTargetRelativeRequest(PublishLandingTargetRelativeRequest&& from) noexcept
    : PublishLandingTargetRelativeRequest() {
    *this = ::std::move(from);
  }

  inline PublishLandingTargetRelativeRequest& operator=(const PublishLandingTargetRelativeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishLandingTargetRelativeRequest& operator=(PublishLandingTargetRelativeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishLandingTargetRelativeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishLandingTargetRelativeRequest* internal_default_instance() {
    return reinterpret_cast<const PublishLandingTargetRelativeRequest*>(
               &_PublishLandingTargetRelativeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PublishLandingTargetRelativeRequest& a, PublishLandingTargetRelativeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishLandingTargetRelativeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishLandingTargetRelativeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishLandingTargetRelativeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishLandingTargetRelativeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishLandingTargetRelativeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishLandingTargetRelativeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishLandingTargetRelativeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest";
  }
  protected:
  explicit PublishLandingTargetRelativeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .mavsdk.rpc.landing_target_server.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::landing_target_server::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::landing_target_server::Position* release_position();
  ::mavsdk::rpc::landing_target_server::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::landing_target_server::Position* position);
  private:
  const ::mavsdk::rpc::landing_target_server::Position& _internal_position() const;
  ::mavsdk::rpc::landing_target_server::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::mavsdk::rpc::landing_target_server::Position* position);
  ::mavsdk::rpc::landing_target_server::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::landing_target_server::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto;
};
// -------------------------------------------------------------------

class PublishLandingTargetRelativeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse) */ {
 public:
  inline PublishLandingTargetRelativeResponse() : PublishLandingTargetRelativeResponse(nullptr) {}
  ~PublishLandingTargetRelativeResponse() override;
  explicit PROTOBUF_CONSTEXPR PublishLandingTargetRelativeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishLandingTargetRelativeResponse(const PublishLandingTargetRelativeResponse& from);
  PublishLandingTargetRelativeResponse(PublishLandingTargetRelativeResponse&& from) noexcept
    : PublishLandingTargetRelativeResponse() {
    *this = ::std::move(from);
  }

  inline PublishLandingTargetRelativeResponse& operator=(const PublishLandingTargetRelativeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishLandingTargetRelativeResponse& operator=(PublishLandingTargetRelativeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishLandingTargetRelativeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishLandingTargetRelativeResponse* internal_default_instance() {
    return reinterpret_cast<const PublishLandingTargetRelativeResponse*>(
               &_PublishLandingTargetRelativeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PublishLandingTargetRelativeResponse& a, PublishLandingTargetRelativeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishLandingTargetRelativeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishLandingTargetRelativeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishLandingTargetRelativeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishLandingTargetRelativeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishLandingTargetRelativeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishLandingTargetRelativeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishLandingTargetRelativeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse";
  }
  protected:
  explicit PublishLandingTargetRelativeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandingTargetResultFieldNumber = 1,
  };
  // .mavsdk.rpc.landing_target_server.LandingTargetResult landing_target_result = 1;
  bool has_landing_target_result() const;
  private:
  bool _internal_has_landing_target_result() const;
  public:
  void clear_landing_target_result();
  const ::mavsdk::rpc::landing_target_server::LandingTargetResult& landing_target_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::landing_target_server::LandingTargetResult* release_landing_target_result();
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* mutable_landing_target_result();
  void set_allocated_landing_target_result(::mavsdk::rpc::landing_target_server::LandingTargetResult* landing_target_result);
  private:
  const ::mavsdk::rpc::landing_target_server::LandingTargetResult& _internal_landing_target_result() const;
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* _internal_mutable_landing_target_result();
  public:
  void unsafe_arena_set_allocated_landing_target_result(
      ::mavsdk::rpc::landing_target_server::LandingTargetResult* landing_target_result);
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* unsafe_arena_release_landing_target_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* landing_target_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LandingTargetResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.landing_target_server.LandingTargetResult) */ {
 public:
  inline LandingTargetResult() : LandingTargetResult(nullptr) {}
  ~LandingTargetResult() override;
  explicit PROTOBUF_CONSTEXPR LandingTargetResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LandingTargetResult(const LandingTargetResult& from);
  LandingTargetResult(LandingTargetResult&& from) noexcept
    : LandingTargetResult() {
    *this = ::std::move(from);
  }

  inline LandingTargetResult& operator=(const LandingTargetResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandingTargetResult& operator=(LandingTargetResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LandingTargetResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const LandingTargetResult* internal_default_instance() {
    return reinterpret_cast<const LandingTargetResult*>(
               &_LandingTargetResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LandingTargetResult& a, LandingTargetResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LandingTargetResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LandingTargetResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LandingTargetResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LandingTargetResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LandingTargetResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LandingTargetResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandingTargetResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.landing_target_server.LandingTargetResult";
  }
  protected:
  explicit LandingTargetResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LandingTargetResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    LandingTargetResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    LandingTargetResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NO_SYSTEM =
    LandingTargetResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return LandingTargetResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    LandingTargetResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    LandingTargetResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    LandingTargetResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return LandingTargetResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return LandingTargetResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return LandingTargetResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .mavsdk.rpc.landing_target_server.LandingTargetResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result result() const;
  void set_result(::mavsdk::rpc::landing_target_server::LandingTargetResult_Result value);
  private:
  ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::landing_target_server::LandingTargetResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.landing_target_server.LandingTargetResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.landing_target_server.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.landing_target_server.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.landing_target_server.Position.z)
}

// -------------------------------------------------------------------

// PublishLandingTargetRelativeRequest

// .mavsdk.rpc.landing_target_server.Position position = 1;
inline bool PublishLandingTargetRelativeRequest::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool PublishLandingTargetRelativeRequest::has_position() const {
  return _internal_has_position();
}
inline void PublishLandingTargetRelativeRequest::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::landing_target_server::Position& PublishLandingTargetRelativeRequest::_internal_position() const {
  const ::mavsdk::rpc::landing_target_server::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::landing_target_server::Position&>(
      ::mavsdk::rpc::landing_target_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::landing_target_server::Position& PublishLandingTargetRelativeRequest::position() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest.position)
  return _internal_position();
}
inline void PublishLandingTargetRelativeRequest::unsafe_arena_set_allocated_position(
    ::mavsdk::rpc::landing_target_server::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest.position)
}
inline ::mavsdk::rpc::landing_target_server::Position* PublishLandingTargetRelativeRequest::release_position() {
  
  ::mavsdk::rpc::landing_target_server::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::landing_target_server::Position* PublishLandingTargetRelativeRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest.position)
  
  ::mavsdk::rpc::landing_target_server::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::landing_target_server::Position* PublishLandingTargetRelativeRequest::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::landing_target_server::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::mavsdk::rpc::landing_target_server::Position* PublishLandingTargetRelativeRequest::mutable_position() {
  ::mavsdk::rpc::landing_target_server::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest.position)
  return _msg;
}
inline void PublishLandingTargetRelativeRequest::set_allocated_position(::mavsdk::rpc::landing_target_server::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeRequest.position)
}

// -------------------------------------------------------------------

// PublishLandingTargetRelativeResponse

// .mavsdk.rpc.landing_target_server.LandingTargetResult landing_target_result = 1;
inline bool PublishLandingTargetRelativeResponse::_internal_has_landing_target_result() const {
  return this != internal_default_instance() && landing_target_result_ != nullptr;
}
inline bool PublishLandingTargetRelativeResponse::has_landing_target_result() const {
  return _internal_has_landing_target_result();
}
inline void PublishLandingTargetRelativeResponse::clear_landing_target_result() {
  if (GetArenaForAllocation() == nullptr && landing_target_result_ != nullptr) {
    delete landing_target_result_;
  }
  landing_target_result_ = nullptr;
}
inline const ::mavsdk::rpc::landing_target_server::LandingTargetResult& PublishLandingTargetRelativeResponse::_internal_landing_target_result() const {
  const ::mavsdk::rpc::landing_target_server::LandingTargetResult* p = landing_target_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::landing_target_server::LandingTargetResult&>(
      ::mavsdk::rpc::landing_target_server::_LandingTargetResult_default_instance_);
}
inline const ::mavsdk::rpc::landing_target_server::LandingTargetResult& PublishLandingTargetRelativeResponse::landing_target_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse.landing_target_result)
  return _internal_landing_target_result();
}
inline void PublishLandingTargetRelativeResponse::unsafe_arena_set_allocated_landing_target_result(
    ::mavsdk::rpc::landing_target_server::LandingTargetResult* landing_target_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landing_target_result_);
  }
  landing_target_result_ = landing_target_result;
  if (landing_target_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse.landing_target_result)
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult* PublishLandingTargetRelativeResponse::release_landing_target_result() {
  
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* temp = landing_target_result_;
  landing_target_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult* PublishLandingTargetRelativeResponse::unsafe_arena_release_landing_target_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse.landing_target_result)
  
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* temp = landing_target_result_;
  landing_target_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult* PublishLandingTargetRelativeResponse::_internal_mutable_landing_target_result() {
  
  if (landing_target_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::landing_target_server::LandingTargetResult>(GetArenaForAllocation());
    landing_target_result_ = p;
  }
  return landing_target_result_;
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult* PublishLandingTargetRelativeResponse::mutable_landing_target_result() {
  ::mavsdk::rpc::landing_target_server::LandingTargetResult* _msg = _internal_mutable_landing_target_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse.landing_target_result)
  return _msg;
}
inline void PublishLandingTargetRelativeResponse::set_allocated_landing_target_result(::mavsdk::rpc::landing_target_server::LandingTargetResult* landing_target_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete landing_target_result_;
  }
  if (landing_target_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(landing_target_result);
    if (message_arena != submessage_arena) {
      landing_target_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landing_target_result, submessage_arena);
    }
    
  } else {
    
  }
  landing_target_result_ = landing_target_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.landing_target_server.PublishLandingTargetRelativeResponse.landing_target_result)
}

// -------------------------------------------------------------------

// LandingTargetResult

// .mavsdk.rpc.landing_target_server.LandingTargetResult.Result result = 1;
inline void LandingTargetResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result LandingTargetResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result >(result_);
}
inline ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result LandingTargetResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.landing_target_server.LandingTargetResult.result)
  return _internal_result();
}
inline void LandingTargetResult::_internal_set_result(::mavsdk::rpc::landing_target_server::LandingTargetResult_Result value) {
  
  result_ = value;
}
inline void LandingTargetResult::set_result(::mavsdk::rpc::landing_target_server::LandingTargetResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.landing_target_server.LandingTargetResult.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace landing_target_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result>() {
  return ::mavsdk::rpc::landing_target_server::LandingTargetResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_landing_5ftarget_5fserver_2flanding_5ftarget_5fserver_2eproto
